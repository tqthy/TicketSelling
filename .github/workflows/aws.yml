name: Deploy to Docker Swarm on EC2 with AWS RDS

on:
  push:
    branches:
      - main # Trigger CD on push to main
  pull_request:
    branches:
      - main # Trigger CI on pull requests to main

env:
  REGISTRY: hub.docker.com # Or docker.io, etc.
  IMAGE_NAME: tqt0304/userservice
  # Name of your stack defined when running 'docker stack deploy'
  SWARM_STACK_NAME: my-prod-stack
  # Path to your compose file ON THE SWARM MANAGER NODE
  COMPOSE_FILE_PATH_ON_MANAGER: /home/${{ secrets.EC2_SWARM_MANAGER_USER }}/app/scripts/docker-compose.prod.yml

jobs:
  #-------------------------
  # CI Job: Build & Push
  #-------------------------
  build_and_push:
    name: Build Docker Image and Push to Registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Required to push to GHCR

    outputs:
      image_tag: ${{ steps.meta.outputs.version }} # Pass the generated tag to deploy job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.REGISTRY_USER }} # Use secret for username
          password: ${{ secrets.REGISTRY_PASSWORD }} # Use secret for token/password

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # images: ${{ env.IMAGE_NAME }}
          images: |
            tqt0304/apigateway
            tqt0304/eventservice
            tqt0304/userservice
            tqt0304/venueservice
            tqt0304/bookingservice
          tags: |
            # Use commit SHA for unique tagging (recommended)
            type=sha,prefix=sha-
            # Optionally, tag 'latest' on pushes to main branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image (UserService)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./UserService/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Push only on merge/push to main
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push Docker image (EventService)
        uses: docker/build-push-action@v5
        with:
          context: . # Note: Context is different as per your compose file
          file: ./EventService/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: tqt0304/eventservice:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image (UserService)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./UserService/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: tqt0304/userservice:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image (VenueService)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./VenueService/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: tqt0304/venueservice:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image (BookingService)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./BookingService.Api/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: tqt0304/bookingservice:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Echo Image Tag
        run: echo "Built image tag"

  #-------------------------------------
  # CD Job: Deploy to Swarm on EC2
  #-------------------------------------
  deploy_to_swarm_on_ec2:
    name: Deploy to Docker Swarm on EC2
    runs-on: ubuntu-latest
    needs: build_and_push # Depends on the build job

    # Only run this job on pushes to the main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # 1. Checkout code needed for the compose file
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up SSH agent (needed for scp and ssh action)
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      # 3. Add Swarm Manager EC2 host to known_hosts
      - name: Add Swarm Manager EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_SWARM_MANAGER_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      # 4. NEW: Copy docker-compose.yml from Repo to Swarm Manager
      - name: Copy Compose file to Swarm Manager
        uses: appleboy/scp-action@v0.1.7 # Or use standard scp command
        with:
          host: ${{ secrets.EC2_SWARM_MANAGER_HOST }}
          username: ${{ secrets.EC2_SWARM_MANAGER_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "./scripts/docker-compose.prod.yml" # Path to compose file in your repo checkout
          target: "/home/${{ secrets.EC2_SWARM_MANAGER_USER }}/app" # Target directory on manager
          # Ensure target directory exists (create in SSH script below if needed)
          # strip_components: 1 # Use if your source path includes directories you don't want on target
      
      - name: Copy configs/rabbitmq.conf to Swarm Manager
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_SWARM_MANAGER_HOST }}
          username: ${{ secrets.EC2_SWARM_MANAGER_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "./scripts/configs/rabbitmq.conf" # Path to rabbitmq.conf in your repo
          target: "/home/${{ secrets.EC2_SWARM_MANAGER_USER }}/app" # Target directory on manager
          
      - name: Copy logstash directory to Swarm Manager
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_SWARM_MANAGER_HOST }}
          username: ${{ secrets.EC2_SWARM_MANAGER_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "./scripts/logstash" # Path to logstash directory in your repo
          target: "/home/${{ secrets.EC2_SWARM_MANAGER_USER }}/app" # Target base directory on manager
        # 7. Copy monitoring directory to Swarm Manager
      - name: Copy monitoring directory to Swarm Manager
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_SWARM_MANAGER_HOST }}
          username: ${{ secrets.EC2_SWARM_MANAGER_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "./scripts/monitoring" # Path to monitoring directory in your repo
          target: "/home/${{ secrets.EC2_SWARM_MANAGER_USER }}/app" #
      # 5. Deploy Stack via SSH to Swarm Manager (using the copied file)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_SWARM_MANAGER_HOST }}
          username: ${{ secrets.EC2_SWARM_MANAGER_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: REGISTRY_USER,REGISTRY_PASSWORD,RDS_HOST,RDS_PORT,RDS_DB_NAME,DB_USER_CONNECTION_STRING,DB_VENUE_CONNECTION_STRING,DB_BOOKING_CONNECTION_STRING,JWT_SECRET,JWT_ISSUER,JWT_AUDIENCE,RABBITMQ_USER,RABBITMQ_PASSWORD,RABBITMQ_HOST,RABBITMQ_PORT,DB_HOST,DB_PORT,DB_USERNAME,DB_PASSWORD,DB_DATABASE,DB_SYNCHRONIZE,NODE_ENV,PORT,IMAGE_TAG,STACK_VERSION,EC2_SWARM_MANAGER_USER
          script: |
            set -e # Exit script on first error
      
            # --- Environment Variables for Deployment ---
            export DEPLOY_IMAGE_TAG=latest
            # export APP_IMAGE_FULL_NAME=hub.docker.com/***/userservice:${DEPLOY_IMAGE_TAG}
            export STACK_NAME=my-prod-stack
            # Use the path where the file was copied by scp
            export COMPOSE_FILE=/home/${EC2_SWARM_MANAGER_USER}/app/scripts/docker-compose.prod.yml # e.g., /home/***/app/docker-compose.yml
            
            echo "--- Ensuring target directory exists ---"
            mkdir -p "$(dirname "${COMPOSE_FILE}")"
            mkdir -p "/home/${{ secrets.EC2_SWARM_MANAGER_USER }}/app/configs"
            mkdir -p "/home/${{ secrets.EC2_SWARM_MANAGER_USER }}/app/logstash"
            mkdir -p "/home/${{ secrets.EC2_SWARM_MANAGER_USER }}/app/monitoring"
            
            # echo "--- Logging into Docker Registry on Swarm Manager ---"
            # # ======================= DEBUGGING BLOCK =======================
            # # The brackets [] will clearly show if the variable is empty.
            # echo "---"
            # echo "DEBUG: Checking variables right before login..."
            # echo "DEBUG: REGISTRY_USER value is [${REGISTRY_USER}]"
            # echo "---"
            # # ===================== END DEBUGGING BLOCK =====================
      
            # echo "--- Logging into Docker Registry on Swarm Manager ---"
            # if [ -z "${REGISTRY_USER}" ]; then
            # echo "ERROR: REGISTRY_USER is empty. Halting."
            # exit 1
            # fi
            # echo "${REGISTRY_PASSWORD}" | docker login -u "${REGISTRY_USER}" --password-stdin
      
            echo "--- Deploying Docker Stack Update using copied compose file ---"
            echo "Stack Name: ${STACK_NAME}"
            echo "Compose File: ${COMPOSE_FILE}" # This now points to the file copied via scp
            # echo "Using Image: ${APP_IMAGE_FULL_NAME}"
      
            # Deploy the stack using the compose file transferred from the repo
            docker stack deploy --compose-file ${COMPOSE_FILE} ${STACK_NAME} --with-registry-auth
      
            echo "--- Deployment to Swarm on EC2 Completed ---"
        env:
          # Docker Registry Credentials
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      
          # RDS Non-Secret Config
          RDS_HOST: ${{ secrets.RDS_HOST }}
          RDS_PORT: ${{ secrets.RDS_PORT }}
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
      
          # Application Secrets passed as environment variables
          DB_USER_CONNECTION_STRING: ${{ secrets.DB_USER_CONNECTION_STRING }}
          DB_VENUE_CONNECTION_STRING: ${{ secrets.DB_VENUE_CONNECTION_STRING }}
          DB_BOOKING_CONNECTION_STRING: ${{ secrets.DB_BOOKING_CONNECTION_STRING }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
          JWT_AUDIENCE: ${{ secrets.JWT_AUDIENCE }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
          RABBITMQ_HOST: ${{ secrets.RABBITMQ_HOST }}
          RABBITMQ_PORT: ${{ secrets.RABBITMQ_PORT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          # DB_SYNCHRONIZE: "false"
          NODE_ENV: ${{ secrets.NODE_ENV }}
          PORT: ${{ secrets.PORT }}
          IMAGE_TAG: ${{ steps.meta.outputs.version }}
          STACK_VERSION: ${{ secrets.STACK_VERSION }}
          EC2_SWARM_MANAGER_USER: ${{ secrets.EC2_SWARM_MANAGER_USER }}
